#!/usr/bin/bash


# $root (or /@root) will be where all the system files are stored once you've made
# a snapshot to /@root (via the 'create @root snapshot from /' option.)
# At that point you'll be able to delete all the files in your original / directory
# (with the exception of .snapshots and @root) by issuing the 'delete root system'
# option in the menu.

root='/@root'

snapshot_dir=/.snapshots
mountOpts='noatime'
new_root=/new_root
mnt=/mnt
temp="$mnt/temp"			# Used for changing from ro to rw
squashPath='/'
squashFile='root.squashfs'

# Useful file: /usr/lib/initcpio/init

overlayFlag=false
tmpfsFlag=false
squashfsFlag=false
rorwFlag=false


boot() {

	[ "$rorwFlag" = 'true' ] && create_rorw "$1"

	# Check if the boot directory contains a bootable system (assume working system has /etc)
	if [ -d "$mnt$1/etc" ]; then
			
		echo -e "Booting $1...\n"

		if [ $tmpfsFlag = 'true' ]; then
			echo create_tmpfs "$1"
			create_tmpfs "$1"
		else
			mount --bind -o "$mountOpts" "$mnt$1" ${new_root}
		fi
	
		[ $overlayFlag = 'true' ] && create_overlay
	
		mount --mkdir --bind -o "$mountOpts" "$mnt$snapshot_dir" "$new_root$snapshot_dir"
	
		finished=true
		
	else

		error "No system found at $1."
		
	fi

}

create_rorw() {

	echo "Creating ro to rw snapshot..."

	bcachefs subvolume snapshot "$mnt$1" "$temp"
	bcachefs subvolume delete "$mnt$1"
	bcachefs subvolume snapshot "$temp" "$mnt$1"
	bcachefs subvolume delete "$temp"

}

create_overlay() {

   echo -e "Booting in overlay mode...\n"

   local lower_dir=$(mktemp -d -p /)
   local ram_dir=$(mktemp -d -p /)
   mount --move ${new_root} ${lower_dir}
   mount -t tmpfs cowspace ${ram_dir}
   mkdir -p ${ram_dir}/upper ${ram_dir}/work
   mount -t overlay -o lowerdir=${lower_dir},upperdir=${ram_dir}/upper,workdir=${ram_dir}/work rootfs ${new_root}

}

create_tmpfs() {

	mount -t tmpfs -o size=80% none $new_root

	echo -e "\nCopying root filesystem to RAM. Please be patient...\n"

	rsync --info=progress2 -axHAXSW --exclude=/efi/ --exclude=/boot/ --exclude=/home/user/.cache/ --exclude=setup.tar.gz --exclude /home/user/.local/share/Trash/ --exclude=/dev/ --exclude=/var/cache/pacman/ --exclude=/run/timeshift/ --exclude=/proc/ --exclude=/sys/ --exclude=/tmp/ --exclude=/run/ --exclude=/mnt/ --exclude=$snapshot_dir/* --exclude=/var/tmp/ --exclude=/var/log/ --exclude=/var/lib/systemd/random-seed --exclude=/root/.cache/* "$mnt$1/" ${new_root}

}

error() {

	echo -e "\n<<< $1 >>>\n"

}

run_latehook() {

	# Automatically find the proper root partition which was booted
	root_part=$(mount | grep ${new_root} | sed "s# on ${new_root}.*##")

	# System pre-mounted, but we want to mount the systems differently
	umount ${new_root}

	mount --mkdir -t bcachefs ${root_part} ${mnt}
	
	echo -e "\nPress any key for bcachefs rollback.\n"

	finished=false
	showMenu=false

	[ $(read -sn1 -t 2 && echo 1) ] && showMenu=true

	while [ ! "$finished" = 'true' ]; do

		if [ $showMenu = 'true' ]; then
			
			echo -e "\n\nWhat would you like to do?

<s> boot into a snapshot
<r> restore snapshot
<b> boot root system
<n> create @root snapshot from /
<d> delete root system
<z> create squashfs
<x> run squashfs
<c> boot custom dir
<e> enter bash
<q> quit

<w> add ro -> rw flag
<o> add overlay flag
<t> add tmpfs flag
<m> add custom mount opts (Not working)

<ENTER> boot @root\n\n"

			read -sn 1 key

		fi


		if [[ "$key" = 'z' ]]; then
			
			echo -e "\nEnter a source to create from.
(eg., '/', '/@root', '/.snapshots/first')\n"

			read squashSource
		
			cd $mnt$squashSource

			mksquashfs . $mnt$squashPath$squashFile -noappend -no-recovery -mem-percent 20 -comp lz4 -e root.squashfs -e "$squashPath$squashFile" -e boot/ -e efi/ -e home/user/.cache/ -e home/user/.local/share/Trash/ -e dev/ -e var/cache/pacman/ -e run/timeshift/ -e proc/ -e sys/ -e tmp/ -e run/ -e mnt/ -e $snapshot_dir/* -e var/tmp/ -e var/log/ -e var/lib/systemd/random-seed -e root/.cache/*
			
			sleep 1

   		ls -lah $mnt$squashPath$squashFile
		
		elif [[ "$key" = 'x' ]]; then

			if [ $tmpfsFlag = 'true' ]; then
				
				echo -e "\nExtracting archive to RAM. Please be patient...\n"
				mount -t tmpfs -o size=80% none $new_root
				unsquashfs -d $new_root -f $mnt$squashPath$squashFile
			
			elif [ $overlayFlag = 'true' ]; then
				
				error "Feature currently not working with overlay flag. Try removing the overlay flag and adding the tmpfs flag."

				mount --type="squashfs" --options="loop" --source="$mnt$squashPath$squashFile" --target="$new_root"
			
				create_overlay
	
			fi
	
			mount --mkdir --bind -o "$mountOpts" "$mnt$snapshot_dir" "$new_root$snapshot_dir"

			finished=true

		elif [[ "$key" = 'o' ]]; then
	
			[ $overlayFlag = 'true' ] && overlayFlag='false' || overlayFlag='true'
			
			echo "overlayFlag=$overlayFlag"

		elif [[ "$key" = 'w' ]]; then
			
			[ $rorwFlag = 'true' ] && rorwFlag='false' || rorwFlag='true'
			
			echo "rorwFlag=$rorwFlag"

		elif [[ "$key" = 't' ]]; then
			
			[ $tmpfsFlag = 'true' ] && tmpfsFlag='false' || tmpfsFlag='true'
			
			echo "tmpfsFlag=$tmpfsFlag"
	
		elif [[ "$key" = 'm' ]]; then
		
			echo "FEATURE NOT CURRENTLY WORKING! (likely due to /etc/fstab overriding?)"
			
			echo -e "\nType mount opts to add (will override current: $mountOpts):\n"

			read mountOpts

			echo -e "\nMounting options '$mountOpts' were added.\n"
	
		elif [[ "$key" = 'n' ]]; then
	
			if [ -d "$mnt/etc" ]; then

				if [ ! -d "$mnt$root" ]; then

					bcachefs subvolume snapshot "$mnt" "$mnt$root" && echo "@root snapshot created."	
				else
				
					error "There is already a @root created."

				fi
		
			else

				error "No system found at /."
	
			fi
	
		elif [[ "$key" = 'c' ]]; then
			
			echo -e "\nType the path you'd like to boot from.\n"

			read bootPath
		
			boot "$bootPath"

		elif [[ "$key" = 's' ]]; then
	
			echo -e "\nType the name of the snapshot you would like to load.\n"

			# TODO: create a way to easily select snapshots instead of having to enter them
		
			ls "$mnt$snapshot_dir"

			echo

			read snapshot
		
			boot "$snapshot_dir/$snapshot"

		elif [[ "$key" = 'b' ]]; then

			boot /

		elif [[ "$key" = 'r' ]]; then

			echo -e "\nType the name of the snapshot you would like to recover to @root.\n"
		
			ls "$mnt$snapshot_dir"

			echo

			read snapshot
	
			if [ -d "$mnt$snapshot_dir/$snapshot" ]; then
			
				if [ -d "$mnt$snapshot_dir$root-old" ]; then
					bcachefs subvolume delete "$mnt$snapshot_dir$root-old"
				fi

				if [ -d "$mnt$root" ]; then
					bcachefs subvolume snapshot "$mnt$root" "$mnt$snapshot_dir$root-old"
					bcachefs subvolume delete $mnt$root
				fi

				bcachefs subvolume snapshot "$mnt$snapshot_dir/$snapshot" $mnt$root
				echo -e "\n'$snapshot' recovered to @root.\n"
					
			else
			
				error "The snapshot '$snapshot' does not exist."

			fi

		elif [[ "$key" = 'e' ]]; then

			echo "Entering bash..."
			bash
	
		elif [[ "$key" = 'd' ]]; then
	
			# Make sure there is a system at @root before proceeding
			# You must keep .snapshots and @root in / or the system won't start
			if [ -d $mnt$root/etc ]; then

				echo "Deleting / (excepting .snapshots and @root)..."
			
				rm -rf /mnt/bin /mnt/boot /mnt/dev /mnt/efi /mnt/etc /mnt/home /mnt/lib /mnt/lib64 /mnt/'lost+found' /mnt/opt /mnt/proc /mnt/root /mnt/run /mnt/sbin /mnt/srv /mnt/sys /mnt/tmp /mnt/usr /mnt/var
			
			else
			
				error "No system located at @root. Will not delete main system."
		
			fi

		elif [[ "$key" = '' ]]; then  # ie., <ENTER> was pressed
			
			boot $root

		elif [[ "$key" = 'q' ]]; then

			echo "Exiting."
			finished=true

			sleep 1
		
		else

			error "Not an known option ($key). Please try again."

		fi

	done
	
	sleep 1

}
